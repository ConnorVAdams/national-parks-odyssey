{"ast":null,"code":"var _jsxFileName = \"/Users/tianalopez/Development_flatiron/code/phase-2/phase-2-project/phase-2-project/natl-parks-game/src/ParkIcon.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { createRoot } from \"react-dom/client\";\nimport { Wrapper } from \"@googlemaps/react-wrapper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ParkIcon = ({\n  map,\n  parks,\n  google\n}) => {\n  var _s = $RefreshSig$();\n  const Marker = ({\n    map,\n    children,\n    position\n  }) => {\n    _s();\n    //need to reconcile dom with jsx/react\n    const markerRef = useRef();\n    const rootRef = useRef();\n\n    //everytime the html passed to the marker changes\n    useEffect(() => {\n      if (!rootRef.current) {\n        //if there is no value for rootRef, initialize\n        const container = document.createElement('div');\n        rootRef.current = createRoot(container);\n        //need advanced marker\n        markerRef.current = new google.maps.marker.AdvancedMarkerView({\n          position,\n          content: container\n        });\n      }\n    }, []);\n    useEffect(() => {\n      //whenever the map changes, position changes or children changes (this is the div)\n      rootRef.current.render(children);\n      markerRef.current.position = position;\n      markerRef.current.map = map;\n    }, [map, children, position]);\n  };\n  _s(Marker, \"Fk9bHClEcm3wmKwbW1mLHM6Gc9w=\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: parks.map(park => /*#__PURE__*/_jsxDEV(Marker, {\n      map: map,\n      position: map.coordinates,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: park.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, park.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this))\n  }, void 0, false);\n};\n_c = ParkIcon;\nexport default ParkIcon;\nvar _c;\n$RefreshReg$(_c, \"ParkIcon\");","map":{"version":3,"names":["React","useState","useEffect","useRef","createRoot","Wrapper","jsxDEV","_jsxDEV","Fragment","_Fragment","ParkIcon","map","parks","google","_s","$RefreshSig$","Marker","children","position","markerRef","rootRef","current","container","document","createElement","maps","marker","AdvancedMarkerView","content","render","park","coordinates","name","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/Users/tianalopez/Development_flatiron/code/phase-2/phase-2-project/phase-2-project/natl-parks-game/src/ParkIcon.js"],"sourcesContent":["import React, { useState, useEffect, useRef} from 'react'\nimport { createRoot } from \"react-dom/client\"\nimport { Wrapper } from \"@googlemaps/react-wrapper\"\n\nconst ParkIcon = ({map, parks, google}) => {\n  const Marker = ({map, children, position}) => {\n    //need to reconcile dom with jsx/react\n    const markerRef = useRef();\n    const rootRef = useRef();\n\n    //everytime the html passed to the marker changes\n    useEffect(() => {\n      if (!rootRef.current) { //if there is no value for rootRef, initialize\n        const container = document.createElement('div')\n        rootRef.current = createRoot(container)\n        //need advanced marker\n        markerRef.current = new google.maps.marker.AdvancedMarkerView({\n          position,\n          content: container\n        })\n      }\n    }, [])\n\n    useEffect(() => { //whenever the map changes, position changes or children changes (this is the div)\n      rootRef.current.render(children)\n      markerRef.current.position = position\n      markerRef.current.map = map\n    },[map, children, position])\n  }\n  return (\n    <>\n    {parks.map((park) => (\n      <Marker key={park.id} map={map} position={map.coordinates}>\n        <div>\n          <h2>{park.name}</h2>\n        </div>\n      </Marker>\n    ))}\n    </>\n  )\n}\n\nexport default ParkIcon\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAO,OAAO;AACzD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,OAAO,QAAQ,2BAA2B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnD,MAAMC,QAAQ,GAAGA,CAAC;EAACC,GAAG;EAAEC,KAAK;EAAEC;AAAM,CAAC,KAAK;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACzC,MAAMC,MAAM,GAAGA,CAAC;IAACL,GAAG;IAAEM,QAAQ;IAAEC;EAAQ,CAAC,KAAK;IAAAJ,EAAA;IAC5C;IACA,MAAMK,SAAS,GAAGhB,MAAM,CAAC,CAAC;IAC1B,MAAMiB,OAAO,GAAGjB,MAAM,CAAC,CAAC;;IAExB;IACAD,SAAS,CAAC,MAAM;MACd,IAAI,CAACkB,OAAO,CAACC,OAAO,EAAE;QAAE;QACtB,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;QAC/CJ,OAAO,CAACC,OAAO,GAAGjB,UAAU,CAACkB,SAAS,CAAC;QACvC;QACAH,SAAS,CAACE,OAAO,GAAG,IAAIR,MAAM,CAACY,IAAI,CAACC,MAAM,CAACC,kBAAkB,CAAC;UAC5DT,QAAQ;UACRU,OAAO,EAAEN;QACX,CAAC,CAAC;MACJ;IACF,CAAC,EAAE,EAAE,CAAC;IAENpB,SAAS,CAAC,MAAM;MAAE;MAChBkB,OAAO,CAACC,OAAO,CAACQ,MAAM,CAACZ,QAAQ,CAAC;MAChCE,SAAS,CAACE,OAAO,CAACH,QAAQ,GAAGA,QAAQ;MACrCC,SAAS,CAACE,OAAO,CAACV,GAAG,GAAGA,GAAG;IAC7B,CAAC,EAAC,CAACA,GAAG,EAAEM,QAAQ,EAAEC,QAAQ,CAAC,CAAC;EAC9B,CAAC;EAAAJ,EAAA,CAvBKE,MAAM;EAwBZ,oBACET,OAAA,CAAAE,SAAA;IAAAQ,QAAA,EACCL,KAAK,CAACD,GAAG,CAAEmB,IAAI,iBACdvB,OAAA,CAACS,MAAM;MAAeL,GAAG,EAAEA,GAAI;MAACO,QAAQ,EAAEP,GAAG,CAACoB,WAAY;MAAAd,QAAA,eACxDV,OAAA;QAAAU,QAAA,eACEV,OAAA;UAAAU,QAAA,EAAKa,IAAI,CAACE;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB;IAAC,GAHKN,IAAI,CAACO,EAAE;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIZ,CACT;EAAC,gBACA,CAAC;AAEP,CAAC;AAAAE,EAAA,GApCK5B,QAAQ;AAsCd,eAAeA,QAAQ;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}