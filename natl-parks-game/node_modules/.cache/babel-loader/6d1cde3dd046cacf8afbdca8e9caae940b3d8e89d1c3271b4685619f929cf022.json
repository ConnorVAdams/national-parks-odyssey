{"ast":null,"code":"var _jsxFileName = \"/Users/tianalopez/Development_flatiron/code/phase-2/phase-2-project/phase-2-project/natl-parks-game/src/AnimalBoard.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport AnimalTile from './AnimalTile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnimalBoard = ({\n  animals,\n  handleWin\n}) => {\n  _s();\n  //count variable keeps track of number of turns player has taken, with an odd numbered count being the middle of a turn and an even number being the end of a turn.\n  const [count, setCount] = useState(0);\n  //clickedName variable holds the value of the first tile clicked every turn.\n  const [clickedName, setClickedName] = useState('');\n  //shuffledDeck variable creates a randomized deck of tiles on initial render\n  const [shuffledDeck, setShuffledDeck] = useState([]);\n\n  //Recieves animal objects and duplicates the object with a new id.\n  const duplicateCards = arr => {\n    const duplicates = arr.map(card => ({\n      ...card,\n      id: card.id + arr.length\n    }));\n    const combined = [...duplicates, ...arr];\n    return combined;\n  };\n\n  //Receives duplicated collection and randomly shuffles it.\n  const shuffleDeck = arr => {\n    for (let i = arr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n  };\n\n  //Callback for onClick on animal tile.\n  const handleSelectAnimal = name => {\n    //TODO Refactor first two ifs into a single if (count % 2 !== 0) statement?\n    //If it's end of turn, check most recently clicked name against value stored in clickedName.\n    if (count % 2 !== 0 && name === clickedName) {\n      //If it's a match, reset clickedName, find matching animal objects, change found property to true, and re-render.\n      console.log('Good job!');\n      setClickedName('');\n      setCount(count => count + 1);\n      setShuffledDeck(current => current.map(animal => animal.name === name ? {\n        ...animal,\n        found: true\n      } : animal));\n    } else if (count % 2 !== 0) {\n      //If it's not a match, give user 1.4 secs to digest both animals, but disable pointer events so user cannot reveal more tiles, then rest clickedName and re-render.\n      document.querySelector('.animal-board').classList.add('disabled');\n      setTimeout(() => {\n        setClickedName('');\n        setCount(count => count + 1);\n      }, 1400);\n      console.log('Better luck next time.');\n    } else {\n      //If it's mid-turn, store first clicked tile in clickedName and re-render.\n      setClickedName(name);\n      setCount(count => count + 1);\n    }\n    //increment count by 1 in all cases.\n  };\n\n  //Create unique deck for game on first render.\n  useEffect(() => {\n    setShuffledDeck(shuffleDeck(duplicateCards(animals)));\n  }, []);\n\n  //Re-enable pointer events after every turn.\n  useEffect(() => {\n    document.querySelector('.animal-board').classList.remove('disabled');\n  }, [count]);\n\n  //Initiate handleWin() callback if all tiles in deck have been found.\n  useEffect(() => {\n    if (shuffledDeck.filter(card => !card.found).length === 0) {\n      const endTime = Date.now();\n      handleWin(endTime, count);\n    }\n  }, [shuffledDeck]);\n\n  //Render <AnimalTile /> components for re-use on the board.\n  const animalDisplay = shuffledDeck.map(animal => {\n    return /*#__PURE__*/_jsxDEV(AnimalTile, {\n      ...animal,\n      handleSelectAnimal: handleSelectAnimal,\n      clickedName: clickedName,\n      count: count\n    }, animal.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'animal-board',\n    children: animalDisplay\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(AnimalBoard, \"CsN1VVo+n33+8lVs5zRY4Yjdf1c=\");\n_c = AnimalBoard;\nexport default AnimalBoard;\nvar _c;\n$RefreshReg$(_c, \"AnimalBoard\");","map":{"version":3,"names":["useState","useEffect","AnimalTile","jsxDEV","_jsxDEV","AnimalBoard","animals","handleWin","_s","count","setCount","clickedName","setClickedName","shuffledDeck","setShuffledDeck","duplicateCards","arr","duplicates","map","card","id","length","combined","shuffleDeck","i","j","Math","floor","random","handleSelectAnimal","name","console","log","current","animal","found","document","querySelector","classList","add","setTimeout","remove","filter","endTime","Date","now","animalDisplay","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["/Users/tianalopez/Development_flatiron/code/phase-2/phase-2-project/phase-2-project/natl-parks-game/src/AnimalBoard.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport AnimalTile from './AnimalTile'\n\nconst AnimalBoard = ({ animals, handleWin }) => {\n    //count variable keeps track of number of turns player has taken, with an odd numbered count being the middle of a turn and an even number being the end of a turn.\n    const [count, setCount] = useState(0)\n    //clickedName variable holds the value of the first tile clicked every turn.\n    const [clickedName, setClickedName] = useState('')\n    //shuffledDeck variable creates a randomized deck of tiles on initial render\n    const [shuffledDeck, setShuffledDeck] = useState([])\n\n    //Recieves animal objects and duplicates the object with a new id.\n    const duplicateCards = (arr) => {\n        const duplicates = arr.map(card => ({ ...card, id: card.id + arr.length }))\n        const combined = [...duplicates, ...arr]\n        return combined\n    }    \n\n    //Receives duplicated collection and randomly shuffles it.\n    const shuffleDeck = (arr) => {\n        for (let i = arr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]]\n        }\n        return arr\n    }\n\n    //Callback for onClick on animal tile.\n    const handleSelectAnimal = (name) => {\n        //TODO Refactor first two ifs into a single if (count % 2 !== 0) statement?\n        //If it's end of turn, check most recently clicked name against value stored in clickedName.\n        if (count % 2 !== 0 && name === clickedName){\n            //If it's a match, reset clickedName, find matching animal objects, change found property to true, and re-render.\n            console.log('Good job!')\n            setClickedName('')\n            setCount(count => count + 1)\n            setShuffledDeck(current => current.map(animal => animal.name === name ? { ...animal, found: true } : animal))\n        } else if (count % 2 !== 0) {\n            //If it's not a match, give user 1.4 secs to digest both animals, but disable pointer events so user cannot reveal more tiles, then rest clickedName and re-render.\n            document.querySelector('.animal-board').classList.add('disabled')\n            setTimeout(() => {\n                setClickedName('')\n                setCount(count => count + 1)\n                }, 1400)\n            console.log('Better luck next time.')\n        } else {\n            //If it's mid-turn, store first clicked tile in clickedName and re-render.\n            setClickedName(name)\n            setCount(count => count + 1)\n        }\n        //increment count by 1 in all cases.\n    }\n\n    //Create unique deck for game on first render.\n    useEffect(() => {\n        setShuffledDeck(shuffleDeck(duplicateCards(animals)))\n    }, [])\n\n    //Re-enable pointer events after every turn.\n    useEffect(() => {\n        document.querySelector('.animal-board').classList.remove('disabled')\n    }, [count])\n\n    //Initiate handleWin() callback if all tiles in deck have been found.\n    useEffect(() => {\n        if ((shuffledDeck.filter(card => !card.found)).length === 0) {\n            const endTime = Date.now()\n            handleWin(endTime, count)\n        }\n    }, [shuffledDeck])\n    \n    //Render <AnimalTile /> components for re-use on the board.\n    const animalDisplay = shuffledDeck.map(animal => {\n        return <AnimalTile \n                    key={animal.id} \n                    {...animal} \n                    handleSelectAnimal={handleSelectAnimal}\n                    clickedName={clickedName}\n                    count={count}\n                />\n    })\n\n    return (\n    <div className={'animal-board'}>\n        {animalDisplay}\n    </div>\n    )\n}\n\nexport default AnimalBoard"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}